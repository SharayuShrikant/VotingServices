// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VotingService.Data;

#nullable disable

namespace VotingService.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230519050034_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VotingService.Models.PollModel", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PollName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PollId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("VotingService.Models.PollQueryModel", b =>
                {
                    b.Property<int>("PollSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollSessionId"));

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.HasKey("PollSessionId");

                    b.HasIndex("PollId");

                    b.HasIndex("QueryId");

                    b.ToTable("PollQueries");
                });

            modelBuilder.Entity("VotingService.Models.QueryModel", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryId"));

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QueryId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("VotingService.Models.ResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("PollId");

                    b.HasIndex("QueryId");

                    b.HasIndex("SolutionId");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("VotingService.Models.SolutionModel", b =>
                {
                    b.Property<int>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolutionId"));

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("SolutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolutionId");

                    b.HasIndex("QueryId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("VotingService.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VotingService.Models.PollQueryModel", b =>
                {
                    b.HasOne("VotingService.Models.PollModel", "Poll")
                        .WithMany("PollQueries")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingService.Models.QueryModel", "Query")
                        .WithMany("PollQueries")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("VotingService.Models.ResponseModel", b =>
                {
                    b.HasOne("VotingService.Models.PollModel", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .IsRequired();

                    b.HasOne("VotingService.Models.QueryModel", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .IsRequired();

                    b.HasOne("VotingService.Models.SolutionModel", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId")
                        .IsRequired();

                    b.HasOne("VotingService.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Poll");

                    b.Navigation("Query");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VotingService.Models.SolutionModel", b =>
                {
                    b.HasOne("VotingService.Models.QueryModel", "Query")
                        .WithMany("Solutions")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("VotingService.Models.PollModel", b =>
                {
                    b.Navigation("PollQueries");
                });

            modelBuilder.Entity("VotingService.Models.QueryModel", b =>
                {
                    b.Navigation("PollQueries");

                    b.Navigation("Solutions");
                });
#pragma warning restore 612, 618
        }
    }
}
